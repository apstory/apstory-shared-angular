{"hash":"45e82f1b6b0c6f715b2dd0faa81117921dda1ad4","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Inject, NgModule } from '@angular/core';\nimport { ApplicationInsights } from '@microsoft/applicationinsights-web';\n\nclass ApstoryLoggerService {\r\n    constructor(instrumentationKey, loggingLevelConsole = 0) {\r\n        this.instrumentationKey = instrumentationKey;\r\n        this.loggingLevelConsole = loggingLevelConsole;\r\n        this.appInsights = new ApplicationInsights({\r\n            config: {\r\n                instrumentationKey: this.instrumentationKey,\r\n                loggingLevelConsole: this.loggingLevelConsole\r\n            }\r\n        });\r\n        this.appInsights.loadAppInsights();\r\n    }\r\n    async logTrace(message, properties, severityLevel, measurements) {\r\n        if (this.loggingLevelConsole === 1) {\r\n            console.log(message);\r\n            this.appInsights.trackTrace({ message, severityLevel, properties, measurements });\r\n        }\r\n    }\r\n    async logTraceSeverity(message, loggerSeverity) {\r\n        if (this.loggingLevelConsole === 1) {\r\n            console.log(message);\r\n            this.logTrace(message, null, loggerSeverity);\r\n        }\r\n    }\r\n    async logPageView(name, uri, measurements, properties, duration, isLoggedIn, pageType) {\r\n        this.appInsights.trackPageView({ name, uri, measurements, properties, isLoggedIn, pageType });\r\n        this.logEvent(name, 'Initialize page');\r\n    }\r\n    async logEvent(name, properties, measurements) {\r\n        this.appInsights.trackEvent({ name, properties, measurements });\r\n        this.logTrace(name);\r\n    }\r\n    async logException(exception, handledAt, properties, measurements, severityLevel, id) {\r\n        if (this.loggingLevelConsole === 1) {\r\n            console.log(exception);\r\n        }\r\n        this.appInsights.trackException({ exception, properties, measurements, severityLevel, id });\r\n    }\r\n    async setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie) {\r\n        this.appInsights.setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie);\r\n    }\r\n}\r\nApstoryLoggerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ApstoryLoggerService, deps: [{ token: 'instrumentationKey' }, { token: 'loggingLevelConsole' }], target: i0.ɵɵFactoryTarget.Injectable });\r\nApstoryLoggerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ApstoryLoggerService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ApstoryLoggerService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: ['instrumentationKey']\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: ['loggingLevelConsole']\r\n                }] }]; } });\n\nclass ApstoryLoggerModule {\r\n    static forRoot(instrumentationKey, loggingLevelConsole) {\r\n        return {\r\n            ngModule: ApstoryLoggerModule,\r\n            providers: [ApstoryLoggerService, { provide: 'instrumentationKey', useValue: instrumentationKey },\r\n                { provide: 'loggingLevelConsole', useValue: loggingLevelConsole }]\r\n        };\r\n    }\r\n}\r\nApstoryLoggerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ApstoryLoggerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nApstoryLoggerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ApstoryLoggerModule });\r\nApstoryLoggerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ApstoryLoggerModule, imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ApstoryLoggerModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [],\r\n                    imports: [],\r\n                    exports: []\r\n                }]\r\n        }] });\n\nvar LoggerSeverityEnum;\r\n(function (LoggerSeverityEnum) {\r\n    LoggerSeverityEnum[LoggerSeverityEnum[\"Verbose\"] = 0] = \"Verbose\";\r\n    LoggerSeverityEnum[LoggerSeverityEnum[\"Information\"] = 1] = \"Information\";\r\n    LoggerSeverityEnum[LoggerSeverityEnum[\"Warning\"] = 2] = \"Warning\";\r\n    LoggerSeverityEnum[LoggerSeverityEnum[\"Error\"] = 3] = \"Error\";\r\n    LoggerSeverityEnum[LoggerSeverityEnum[\"Critical\"] = 4] = \"Critical\";\r\n})(LoggerSeverityEnum || (LoggerSeverityEnum = {}));\n\n/*\r\n * Public API Surface of apstory-logger\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ApstoryLoggerModule, ApstoryLoggerService, LoggerSeverityEnum };\n//# sourceMappingURL=apstory-logger.mjs.map\n","map":{"version":3,"file":"apstory-logger.mjs","sources":["../../../projects/apstory-logger/src/lib/apstory-logger.service.ts","../../../projects/apstory-logger/src/lib/apstory-logger.module.ts","../../../projects/apstory-logger/src/lib/enum/apstory-logger-severity-enum.ts","../../../projects/apstory-logger/src/public-api.ts","../../../projects/apstory-logger/src/apstory-logger.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\nimport { ApplicationInsights } from '@microsoft/applicationinsights-web';\r\nimport { LoggerSeverityEnum } from './enum/apstory-logger-severity-enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApstoryLoggerService {\r\n\r\n  private appInsights = new ApplicationInsights({\r\n    config: {\r\n      instrumentationKey: this.instrumentationKey,\r\n      loggingLevelConsole: this.loggingLevelConsole\r\n    }\r\n  });\r\n\r\n  constructor(\r\n    @Inject('instrumentationKey') private instrumentationKey: string,\r\n    @Inject('loggingLevelConsole') private loggingLevelConsole: number = 0) {\r\n    this.appInsights.loadAppInsights();\r\n  }\r\n\r\n  async logTrace(message: string, properties?: any, severityLevel?: any, measurements?: any) {\r\n    if (this.loggingLevelConsole === 1) {\r\n      console.log(message);\r\n      this.appInsights.trackTrace({ message, severityLevel, properties, measurements });\r\n    }\r\n  }\r\n\r\n  async logTraceSeverity(message: string, loggerSeverity: LoggerSeverityEnum) {\r\n    if (this.loggingLevelConsole === 1) {\r\n      console.log(message);\r\n      this.logTrace(message, null, loggerSeverity);\r\n    }\r\n  }\r\n\r\n  async logPageView(\r\n    name?: string, uri?: string, measurements?: any, properties?: any, duration?: number, isLoggedIn?: boolean,\r\n    pageType?: string\r\n  ) {\r\n    this.appInsights.trackPageView({ name, uri, measurements, properties, isLoggedIn, pageType });\r\n    this.logEvent(name, 'Initialize page');\r\n  }\r\n\r\n  async logEvent(name: string, properties?: any, measurements?: any) {\r\n    this.appInsights.trackEvent({ name, properties, measurements });\r\n    this.logTrace(name);\r\n  }\r\n\r\n  async logException(exception: Error, handledAt?: string, properties?: any, measurements?: any, severityLevel?: any, id?: string) {\r\n    if (this.loggingLevelConsole === 1) { console.log(exception); }\r\n    this.appInsights.trackException({ exception, properties, measurements, severityLevel, id });\r\n  }\r\n\r\n  async setAuthenticatedUserContext(authenticatedUserId: string, accountId?: string, storeInCookie?: boolean) {\r\n    this.appInsights.setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie);\r\n  }\r\n\r\n}\r\n","import { ApstoryLoggerService } from './apstory-logger.service';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [],\r\n  exports: []\r\n})\r\nexport class ApstoryLoggerModule {\r\n  static forRoot(instrumentationKey: string, loggingLevelConsole: number): ModuleWithProviders<ApstoryLoggerModule> {\r\n    return {\r\n      ngModule: ApstoryLoggerModule,\r\n      providers: [ApstoryLoggerService, { provide: 'instrumentationKey', useValue: instrumentationKey },\r\n        { provide: 'loggingLevelConsole', useValue: loggingLevelConsole }]\r\n    };\r\n  }\r\n}\r\n","export enum LoggerSeverityEnum {\r\n    Verbose = 0,\r\n    Information = 1,\r\n    Warning = 2,\r\n    Error = 3,\r\n    Critical = 4\r\n}\r\n","/*\r\n * Public API Surface of apstory-logger\r\n */\r\n\r\nexport * from './lib/apstory-logger.service';\r\nexport * from './lib/apstory-logger.module';\r\nexport * from './lib/enum/apstory-logger-severity-enum';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, NgModule } from '@angular/core';\nimport { ApplicationInsights } from '@microsoft/applicationinsights-web';\n\nclass ApstoryLoggerService {\r\n    constructor(instrumentationKey, loggingLevelConsole = 0) {\r\n        this.instrumentationKey = instrumentationKey;\r\n        this.loggingLevelConsole = loggingLevelConsole;\r\n        this.appInsights = new ApplicationInsights({\r\n            config: {\r\n                instrumentationKey: this.instrumentationKey,\r\n                loggingLevelConsole: this.loggingLevelConsole\r\n            }\r\n        });\r\n        this.appInsights.loadAppInsights();\r\n    }\r\n    logTrace(message, properties, severityLevel, measurements) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.loggingLevelConsole === 1) {\r\n                console.log(message);\r\n                this.appInsights.trackTrace({ message, severityLevel, properties, measurements });\r\n            }\r\n        });\r\n    }\r\n    logTraceSeverity(message, loggerSeverity) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.loggingLevelConsole === 1) {\r\n                console.log(message);\r\n                this.logTrace(message, null, loggerSeverity);\r\n            }\r\n        });\r\n    }\r\n    logPageView(name, uri, measurements, properties, duration, isLoggedIn, pageType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.appInsights.trackPageView({ name, uri, measurements, properties, isLoggedIn, pageType });\r\n            this.logEvent(name, 'Initialize page');\r\n        });\r\n    }\r\n    logEvent(name, properties, measurements) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.appInsights.trackEvent({ name, properties, measurements });\r\n            this.logTrace(name);\r\n        });\r\n    }\r\n    logException(exception, handledAt, properties, measurements, severityLevel, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.loggingLevelConsole === 1) {\r\n                console.log(exception);\r\n            }\r\n            this.appInsights.trackException({ exception, properties, measurements, severityLevel, id });\r\n        });\r\n    }\r\n    setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.appInsights.setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie);\r\n        });\r\n    }\r\n}\r\nApstoryLoggerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ApstoryLoggerService, deps: [{ token: 'instrumentationKey' }, { token: 'loggingLevelConsole' }], target: i0.ɵɵFactoryTarget.Injectable });\r\nApstoryLoggerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ApstoryLoggerService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ApstoryLoggerService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: ['instrumentationKey']\r\n                    }] }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: ['loggingLevelConsole']\r\n                    }] }];\r\n    } });\n\nclass ApstoryLoggerModule {\r\n    static forRoot(instrumentationKey, loggingLevelConsole) {\r\n        return {\r\n            ngModule: ApstoryLoggerModule,\r\n            providers: [ApstoryLoggerService, { provide: 'instrumentationKey', useValue: instrumentationKey },\r\n                { provide: 'loggingLevelConsole', useValue: loggingLevelConsole }]\r\n        };\r\n    }\r\n}\r\nApstoryLoggerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ApstoryLoggerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nApstoryLoggerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ApstoryLoggerModule });\r\nApstoryLoggerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ApstoryLoggerModule, imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: ApstoryLoggerModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [],\r\n                    imports: [],\r\n                    exports: []\r\n                }]\r\n        }] });\n\nvar LoggerSeverityEnum;\r\n(function (LoggerSeverityEnum) {\r\n    LoggerSeverityEnum[LoggerSeverityEnum[\"Verbose\"] = 0] = \"Verbose\";\r\n    LoggerSeverityEnum[LoggerSeverityEnum[\"Information\"] = 1] = \"Information\";\r\n    LoggerSeverityEnum[LoggerSeverityEnum[\"Warning\"] = 2] = \"Warning\";\r\n    LoggerSeverityEnum[LoggerSeverityEnum[\"Error\"] = 3] = \"Error\";\r\n    LoggerSeverityEnum[LoggerSeverityEnum[\"Critical\"] = 4] = \"Critical\";\r\n})(LoggerSeverityEnum || (LoggerSeverityEnum = {}));\n\n/*\r\n * Public API Surface of apstory-logger\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ApstoryLoggerModule, ApstoryLoggerService, LoggerSeverityEnum };\n//# sourceMappingURL=apstory-logger.mjs.map\n","map":{"version":3,"file":"apstory-logger.mjs","sources":["../../../projects/apstory-logger/src/lib/apstory-logger.service.ts","../../../projects/apstory-logger/src/lib/apstory-logger.module.ts","../../../projects/apstory-logger/src/lib/enum/apstory-logger-severity-enum.ts","../../../projects/apstory-logger/src/public-api.ts","../../../projects/apstory-logger/src/apstory-logger.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\nimport { ApplicationInsights } from '@microsoft/applicationinsights-web';\r\nimport { LoggerSeverityEnum } from './enum/apstory-logger-severity-enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApstoryLoggerService {\r\n\r\n  private appInsights = new ApplicationInsights({\r\n    config: {\r\n      instrumentationKey: this.instrumentationKey,\r\n      loggingLevelConsole: this.loggingLevelConsole\r\n    }\r\n  });\r\n\r\n  constructor(\r\n    @Inject('instrumentationKey') private instrumentationKey: string,\r\n    @Inject('loggingLevelConsole') private loggingLevelConsole: number = 0) {\r\n    this.appInsights.loadAppInsights();\r\n  }\r\n\r\n  async logTrace(message: string, properties?: any, severityLevel?: any, measurements?: any) {\r\n    if (this.loggingLevelConsole === 1) {\r\n      console.log(message);\r\n      this.appInsights.trackTrace({ message, severityLevel, properties, measurements });\r\n    }\r\n  }\r\n\r\n  async logTraceSeverity(message: string, loggerSeverity: LoggerSeverityEnum) {\r\n    if (this.loggingLevelConsole === 1) {\r\n      console.log(message);\r\n      this.logTrace(message, null, loggerSeverity);\r\n    }\r\n  }\r\n\r\n  async logPageView(\r\n    name?: string, uri?: string, measurements?: any, properties?: any, duration?: number, isLoggedIn?: boolean,\r\n    pageType?: string\r\n  ) {\r\n    this.appInsights.trackPageView({ name, uri, measurements, properties, isLoggedIn, pageType });\r\n    this.logEvent(name, 'Initialize page');\r\n  }\r\n\r\n  async logEvent(name: string, properties?: any, measurements?: any) {\r\n    this.appInsights.trackEvent({ name, properties, measurements });\r\n    this.logTrace(name);\r\n  }\r\n\r\n  async logException(exception: Error, handledAt?: string, properties?: any, measurements?: any, severityLevel?: any, id?: string) {\r\n    if (this.loggingLevelConsole === 1) { console.log(exception); }\r\n    this.appInsights.trackException({ exception, properties, measurements, severityLevel, id });\r\n  }\r\n\r\n  async setAuthenticatedUserContext(authenticatedUserId: string, accountId?: string, storeInCookie?: boolean) {\r\n    this.appInsights.setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie);\r\n  }\r\n\r\n}\r\n","import { ApstoryLoggerService } from './apstory-logger.service';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [],\r\n  exports: []\r\n})\r\nexport class ApstoryLoggerModule {\r\n  static forRoot(instrumentationKey: string, loggingLevelConsole: number): ModuleWithProviders<ApstoryLoggerModule> {\r\n    return {\r\n      ngModule: ApstoryLoggerModule,\r\n      providers: [ApstoryLoggerService, { provide: 'instrumentationKey', useValue: instrumentationKey },\r\n        { provide: 'loggingLevelConsole', useValue: loggingLevelConsole }]\r\n    };\r\n  }\r\n}\r\n","export enum LoggerSeverityEnum {\r\n    Verbose = 0,\r\n    Information = 1,\r\n    Warning = 2,\r\n    Error = 3,\r\n    Critical = 4\r\n}\r\n","/*\r\n * Public API Surface of apstory-logger\r\n */\r\n\r\nexport * from './lib/apstory-logger.service';\r\nexport * from './lib/apstory-logger.module';\r\nexport * from './lib/enum/apstory-logger-severity-enum';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}}}